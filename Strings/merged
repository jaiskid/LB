/*-- File: LPSubstring.cpp start --*/

/*-- File: LPSubstring.cpp end --*/
/*-- File: LongestPalindromicbruteforce.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
void printSubStr(string str, int low, int high)
{
	for (int i = low; i <= high; ++i)
		cout << str[i];
}
int longestPalindrom(string s) {
	int maxLength = -1;
	int start = 0;
	for (int i = 0; i < s.size(); i++) {
		for (int j = i; j < s.size(); j++) {
			int flag = 1;
			for (int k = 0; k < (j - i + 1) / 2; k++) {
				if (s[i + k] != s[j - k]) {
					flag = 0;
				}
			}
			if (flag and (j - i + 1) > maxLength) {
				maxLength = j - i + 1;
			}
		}
	}
	printSubStr(str, start, start + maxLength - 1);
	return maxLength;
}
int main() {
	string s;
	cin >> s;
	cout << longestPalindrom(s);
}
/*-- File: LongestPalindromicbruteforce.cpp end --*/
/*-- File: Palindrome.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
int isPlaindrome(string S)
{
	// Your code goes here
	int s = 0;
	int e = S.size() - 1;
	while (s < e) {
		if (S[s] != S[e]) {

			return false;

		}
		s++;
		e--;
	}
	return true;
}
int main() {
	string s;
	cin >> s;
	cout << isPlaindrome(s);
}
/*-- File: Palindrome.cpp end --*/
/*-- File: PrintAllduplicates.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
int main() {
	string s;
	cin >> s;
	unordered_map<char, int> mp;
	for (char val : s) {
		mp[val]++;
	}
	for (auto val : mp) {
		if (val.second > 1) {
			cout << val.first << " ";
		}
	}
}
/*-- File: PrintAllduplicates.cpp end --*/
/*-- File: Reverseofstring.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
int main() {
	string S;
	cin >> S;
	int s = 0;
	int e = S.length() - 1;
	while (s < e) {
		char temp = S[s];
		S[s] = S[e];
		S[e] = temp;
		s++;
		e--;
	}
	cout << S << endl;
}

/*-- File: Reverseofstring.cpp end --*/
/*-- File: RotationofString.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
bool Rotation(string a, string b) {
	if (a.length() != b.length())
		return false;
	string temp = a + a;
	return (temp.find(b) != string::npos);
}
int main() {
	string a, b;
	cin >> a >> b;
	cout << Rotation(a, b);
	return 0;
}
/*-- File: RotationofString.cpp end --*/
/*-- File: Sprial.cpp start --*/

/*-- File: Sprial.cpp end --*/
/*-- File: StringShuffle.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
bool shuffleCheck(string a, string b, string checker) {
	if (a.size() + b.size() != checker.size()) {
		return false;
	}
	int i = 0, j = 0, k = 0;
	while (k != checker.size()) {
		if (i < a.size() && a[i] == checker[k])
			i++;
		else if (j < b.size() && b[j] == checker[k])
			j++;
		else
			return false;
		k++;
	}
	// after accessing all characters of result
	// if either first or second has some characters left
	if (i < a.size() || j < b.size()) {
		return false;
	}
	return true;
}
int main() {
	string a, b;
	cin >> a >> b;
	string checker;
	cin >> checker;
	if (shuffleCheck(a, b, checker) == true) {
		cout << "Yes" << endl;
	}
	else {
		cout << "No" << endl;
	}

}
/*-- File: StringShuffle.cpp end --*/
