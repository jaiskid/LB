/*-- File: Brother-from-differentroot.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node* left;
	node* right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
unordered_set<int>s1, s2;
node* construct(node* root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
void preorder(node*root) {
	if (root == NULL) {
		return;
	}
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
void filltheset(node* root, unordered_set<int>&s) {
	if (root) {
		filltheset(root->left, s);
		s.insert(root->data);
		filltheset(root->right, s);
	}
}
int countPair(node*root1, node*root2, int x) {
	int sum = 0;
	for (auto ele : s1) {
		if (s2.find(x - ele) != s2.end()) {
			sum++;
		}
	}
	return sum;
}
int main(int argc, char const *argv[])
{
	int n;
	cin >> n;
	int m;
	cin >> m;
	node*root1 = NULL, *root2 = NULL;
	while (n--) {
		int data;
		cin >> data;
		root1 = construct(root1, data);
	}
	while (m--) {
		int data;
		cin >> data;
		root2 = construct(root2, data);
	}

	filltheset(root1, s1);
	filltheset(root2, s2);
	int x;
	cin >> x;
	cout << countPair(root1, root2, x);
	return 0;
}
/*-- File: Brother-from-differentroot.cpp end --*/
/*-- File: ConvertNormalBstbalanced.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left, *right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node* construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
void inorder(node*root, vector<node*>&in) {
	if (root == NULL)
		return;
	inorder(root->left, in);
	in.push_back(root);
	inorder(root->right, in);
}
node*buildtree(vector<node*>&in, int start, int end) {
	if (start > end)
		return NULL;
	int mid = start + (end - start) / 2;
	node*root = in[mid];
	root->left = buildtree(in, start, mid - 1);
	root->right = buildtree(in, mid + 1, end);
	return root;
}
void preorder(node*root) {
	if (root == NULL)
		return;
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
int main() {
	node*root = NULL;
	int n;
	cin >> n;
	while (n--) {
		int data;
		cin >> data;
		root = construct(root, data);
	}
	preorder(root);
	vector<node*>in;
	cout << endl;
	inorder(root, in);
	root = buildtree(in, 0, in.size() - 1);
	preorder(root);
}
/*-- File: ConvertNormalBstbalanced.cpp end --*/
/*-- File: CountbstnodesinRange.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left, *right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node*construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
int count(node*root, int l, int h) {
	if (root == NULL)
		return 0;
	if (root->data == l and root->data == h)
		return 1;
	if (root->data >= l and root->data <= h) {
		return 1 + count(root->left, l, h) + count(root->right, l, h);
	}
	if (root->data < l) {
		return count(root->right, l, h);
	}
	else
		return count(root->left, l, h);
}
int main() {
	node*root = NULL;
	int n;
	cin >> n;
	while (n--) {
		int data;
		cin >> data;
		root = construct(root, data);
	}
	int l, h;
	cin >> l >> h;
	cout << count(root, l, h);
}
/*-- File: CountbstnodesinRange.cpp end --*/
/*-- File: DeadEnd.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left, *right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node*construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
void inorder(node*root) {
	if (root ==  NULL)
		return;
	inorder(root->left);
	cout << root->data << " ";
	inorder(root->right);
}
void traverse(node*root, bool &flag, int l, int r) {
	if (!flag || !root)
		return;
	if (l == r || r == 1) {
		flag = 0;
	}
	traverse(root->left, flag, l, root->data - 1);
	traverse(root->right, flag, root->data + 1, r);
}
bool isDeadEnd(node*root) {
	bool flag = 1;
	traverse(root, flag, INT_MIN, INT_MAX);
	return !flag;
}
int main() {
	node* root = NULL;
	int n;
	cin >> n;
	while (n--) {
		int data;
		cin >> data;
		root = construct(root, data);
	}
	inorder(root);
	cout << isDeadEnd(root);

}
/*-- File: DeadEnd.cpp end --*/
/*-- File: DeleteNodeInBst.cpp start --*/
//Before we start
// handle these cases
// Node to be deleted is leaf
//Node to be deleted has only one child
//Node to deleted has two children
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left;
	node*right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node* construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
void preorder(node*root) {
	if (root == NULL)
		return;
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
int max(node*root) {
	if (root ->right != NULL) {
		return max(root->right);
	}
	else
		return root->data;
}
node* deleteNode(node*root, int data) {
	if (root == NULL)
		return NULL;
	if (data > root->data) {
		root->right = deleteNode(root->right, data);
	}
	else if (data < root->data) {
		root->left = deleteNode(root->left, data);
	}
	else {
		if (root->left != NULL and root->right != NULL) {
			int lmax = max(root->left);
			root->data = lmax;
			root->left = deleteNode(root->left, lmax);
		}
		else if (root->left != NULL) {
			return root->left;
		}
		else if (root->right != NULL) {
			return root->right;
		}
		else {
			return NULL;
		}
	}
	return root;
}
int main() {
	node*root = NULL;
	int n;
	cin >> n;
	while (n--) {
		int data;
		cin >> data;
		root =	construct(root, data);
	}
	preorder(root);
	int key;
	cin >> key;
	root = deleteNode(root, key);
	preorder(root);
}
/*-- File: DeleteNodeInBst.cpp end --*/
/*-- File: FindThevalueInBst.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node* left;
	node* right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node* construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
node* search(node*root, int key) {
	if (root == NULL || root->data == key) {
		return root;
	}
	if (root->data < key) {
		return search(root->right, key);
	}
	return search(root->left, key);
}
void preorder(node*root) {
	if (root == NULL)
		return;
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
int main() {
	node* root = NULL;
	int n;
	cin >> n;
	while (n--) {
		int d;
		cin >> d;
		root = construct(root, d);
	}
	preorder(root);
	int key;
	cin >> key;
	root = search(root, key);
	if (root == NULL)
		cout << -1;
	else
		cout << root->data;
}
/*-- File: FindThevalueInBst.cpp end --*/
/*-- File: KthLargest.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left, *right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node* construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
void ReverseInorder(node*root, int k, int &index, int &res) {
	if (root != NULL) {
		ReverseInorder(root->right, k, index, res);
		if (index == k) {
			res = root->data;
		}
		index++;
		ReverseInorder(root->left, k, index, res);
	}
}
int main() {
	node*root = NULL;
	int n;
	cin >> n;
	while (n--) {
		int data;
		cin >> data;
		root = construct(root, data);
	}

	int k;
	cin >> k;
	int index = 1;
	int res = -1;
	ReverseInorder(root, k, index, res);
	cout << res << endl;
}
/*-- File: KthLargest.cpp end --*/
/*-- File: KthSmallestBst.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left;
	node*right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node* construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
void inorder(node*root, int k, int &index, int &res) {
	if (root != NULL) {
		return;
	}
	inorder(root->left, k, index, res);
	if (index == k) {
		res = root->data;
	}
	index++;
	inorder(root->right, k, index, res);

}
void preorder(node*root) {
	if (root == NULL) {
		return;
	}
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
int main() {
	node*root = NULL;
	int n;
	cin >> n;
	while (n--) {
		int data;
		cin >> data;
		root = construct(root, data);
	}
	preorder(root);
	int k;
	cin >> k;
	int res = -1;
	int index = 1;
	inorder(root, k, index, res);
	cout << res;
}
/*-- File: KthSmallestBst.cpp end --*/
/*-- File: LcaBst.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left, *right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node*construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (root->data > data) {
		root->left = construct(root->left, data);
	}
	else {
		root->right = construct(root->right, data);
	}
	return root;
}
int Lca(node*root, int n1, int n2) {
	if (root->data < n1 and root->data < n2) {
		return Lca(root->right, n1, n2);
	}
	else if (root->data > n1  and root -> data > n2) {
		return Lca(root->left, n1, n2);
	}
	return root->data;
}
void preorder(node*root) {
	if (root == NULL)
		return;
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
int main() {
	node* root = NULL;
	int n;
	cin >> n;
	while (n--) {
		int data;
		cin >> data;
		root = construct(root, data);
	}
	preorder(root);
	int n1, n2;
	cin >> n1 >> n2;
	cout << Lca(root, n1, n2);
}
/*-- File: LcaBst.cpp end --*/
/*-- File: PreSuc.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left;
	node*right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node*construct(node*root, int data) {
	if (root == NULL) {
		root = new node(data);
		return root;
	}
	if (data < root->data)
		root->left = construct(root->left, data);
	else
		root->right = construct(root->right, data);
	return root;
}
void findPreSuc(node*root, node*&pre, node*&suc, int key) {
	if (root == NULL)
		return;
	if (root->data == key) {
		//predecessor
		if (root->left != NULL) {
			node*temp = node->left;
			while (temp->right) {
				temp = temp->right;

			}
			pre = temp;
		}
		//Successor
		if (root->right != NULL) {
			node*temp = node->right;
			while (temp->left) {
				temp = temp->left;

			}
			suc = temp;
		}
	}
	if (root->data > key) {
		//succesor is the root itself and gone to find the preorder
		suc = root;
		findPreSuc(root->left, pre, suc, key);
	}
	else {
		pre = root;
		findPreSuc(root->right, pre, suc, key);
	}
}
void preorder(node*root) {
	if (root == NULL) {
		return;
	}
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
int main() {
	int n;
	cin >> n;
	node*root = NULL;
	while (n--) {
		int data;
		cin >> data;
		root = construct(root, data);
	}
	preorder(root);
}
/*-- File: PreSuc.cpp end --*/
/*-- File: binaryToBst.cpp start --*/
#include<bits/stdc++.h>
using namespace std;
class node {
public:
	int data;
	node*left;
	node*right;
	node(int d) {
		data = d;
		left = right = NULL;
	}
};
node* binaryconstruct() {
	int data;
	cin >> data;
	if (data == -1)
		return NULL;
	node* root = new node(data);
	root->left = binaryconstruct();
	root->right = binaryconstruct();
	return root;
}
void preorder(node*root) {
	if (root == NULL)
		return;
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}
void inorder(node*root, vector<int>&in) {
	if (root == NULL)
		return;
	inorder(root->left, in);
	in.push_back(root->data);
	inorder(root->right, in);
}
void bst(node*root, vector<int>&in, int &i) {
	if (root == NULL)
		return;
	bst(root->left, in, i);
	root->data = in[i++];
	bst(root->right, in, i);
}
node*construct(node*root) {
	vector<int>in;
	inorder(root, in);
	sort(in.begin(), in.end());
	int i = 0;
	bst(root, in, i);
	return root;
}
void inorder(node*root) {
	if (root == NULL) {
		return;
	}
	inorder(root->left);
	cout << root->data << " ";
	inorder(root->right);
}
int main() {
	node*root = NULL;
	root = binaryconstruct();
	// preorder(root);
	cout << endl;
	root = construct(root);
	inorder(root);
}
/*-- File: binaryToBst.cpp end --*/
